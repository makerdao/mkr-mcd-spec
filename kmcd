#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

kmcd_dir="${KMCD_DIR:-.}"
build_dir="$kmcd_dir/.build"
defn_dir="${KMCD_DEFN_DIR:-$build_dir/defn}"
lib_dir="$build_dir/local/lib"
k_release_dir="${K_RELEASE:-$kmcd_dir/deps/k/k-distribution/target/release/k}"

export PATH="$k_release_dir/lib/native/linux:$k_release_dir/lib/native/linux64:$k_release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$k_release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

test_logs="$build_dir/logs"
mkdir -p "$test_logs"
test_log="$test_logs/tests.log"

KLAB_OUT="${KLAB_OUT:-$build_dir/klab}"
KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-30000}"
export KLAB_OUT

# Utilities
# ---------

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index --ignore-all-space "$@"
}

# Runners
# -------

# User Commands

run_krun() {
    export K_OPTS=-Xss500m
    krun --directory "$backend_dir" "$run_file" "$@" -cRANDOMSEED=$cRANDOMSEED -pRANDOMSEED='printf %s'
}

run_kast() {
    local output_mode
    output_mode="$1" ; shift
    kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@"
}

run_prove() {
    export K_OPTS=-Xmx8G
    kprove --directory "$backend_dir" "$run_file" "$@"
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    export K_OPTS=-Xmx8G
    run_krun --search --pattern "$search_pattern" "$@"
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]]; then
    echo "
        usage: $0 run        [--backend (llvm|haskell)] <pgm>  <K arg>*
               $0 kast       [--backend (llvm|haskell)] <pgm>  <output format> <K arg>*
               $0 prove      [--backend (haskell)]      <spec> <K arg>* -m <def_module>
               $0 search     [--backend (haskell)]      <pgm>  <pattern> <K arg>*
               $0 klab-run                              <pgm>  <K arg>*
               $0 klab-prove                            <spec> <K arg>* -m <def_module>
               $0 klab-view                             <spec>

           $0 run       : Run a single MCD simulation
           $0 kast      : Parse an MCD simulation and output it in a supported format
           $0 prove     : Run an MCD K proof
           $0 search    : Search for a K pattern in an MCD simulation execution
           $0 klab-(run|prove) : Run program or prove spec and dump StateLogs which KLab can read
           $0 klab-view : View the statelog associated with a given program or spec

           Note: <pgm> is a path to a file containing an MCD simulation/test.
                 <spec> is a K specification to be proved.
                 <K arg> is an argument you want to pass to K.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <def_module> is the module to take as axioms when doing verification.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

backend="llvm"
debug=false
[[ ! "$run_command" == 'prove' ]] || backend='haskell'
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --backend) backend="$2" ; shift 2 ;;
        *)         break                  ;;
    esac
done
backend_dir="$defn_dir/$backend"

# get the run file
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

cRANDOMSEED="#token(\"${RANDOMSEED:-}\",\"Bytes\")"

case "$run_command-$backend" in
    run-@(llvm|haskell)    ) run_krun   "$@" ;;
    kast-@(llvm|haskell)   ) run_kast   "$@" ;;
    prove-@(haskell)       ) run_prove  "$@" ;;
    search-@(haskell)      ) run_search "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
