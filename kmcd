#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

INSTALL_BIN="$(dirname $0)"
INSTALL_LIB=${INSTALL_BIN}/../lib/kmcd
KEVM_BIN=${INSTALL_LIB}/kevm/bin
K_BIN=${INSTALL_LIB}/kevm/lib/kevm/kframework/bin

export PATH="${KEVM_BIN}:${K_BIN}:${PATH}"

# Utilities
# ---------

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index --ignore-all-space "$@"
}

# Runners
# -------

# User Commands

run_krun() {
    export K_OPTS=-Xss500m
    krun --directory "$backend_dir" "$run_file" -cRANDOMSEED=$cRANDOMSEED -pRANDOMSEED='cat' "$@"
}

run_kast() {
    local output_mode
    output_mode="$1" ; shift
    kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@"
}

run_prove() {
    export K_OPTS=-Xmx8G
    kprove --directory "$backend_dir" "$run_file" "$@"
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    export K_OPTS=-Xmx8G
    run_krun --search --pattern "$search_pattern" "$@"
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]]; then
    echo "
        usage: $0 run    [--backend (llvm|haskell)] [--random-seed <random-seed>] <pgm>  <K arg>*
               $0 kast   [--backend (llvm|haskell)]                               <pgm>  <output format> <K arg>*
               $0 prove  [--backend (haskell)]                                    <spec> <K arg>* -m <def_module>
               $0 search [--backend (haskell)]                                    <pgm>  <pattern> <K arg>*

           $0 run    : Run a single MCD simulation
           $0 kast   : Parse an MCD simulation and output it in a supported format
           $0 prove  : Run an MCD K proof
           $0 search : Search for a K pattern in an MCD simulation execution

           Note: <pgm> is a path to a file containing an MCD simulation/test.
                 <spec> is a K specification to be proved.
                 <K arg> is an argument you want to pass to K.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <def_module> is the module to take as axioms when doing verification.
                 <random-seed> is a hex-string to be taken as a random input seed.
    "
    exit 0
fi

backend="llvm"
debug=false
random_seed=""
[[ ! "$run_command" == 'prove' ]] || backend='haskell'
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --random-seed) random_seed="$2" ; shift 2 ;;
        --backend)     backend="$2"     ; shift 2 ;;
        *)             break                      ;;
    esac
done
backend_dir="${INSTALL_LIB}/$backend"

# get the run file
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

cRANDOMSEED="\dv{SortString{}}(\"${random_seed}\")"

case "$run_command-$backend" in
    run-@(llvm|haskell)    ) run_krun   "$@" ;;
    kast-@(llvm|haskell)   ) run_kast   "$@" ;;
    prove-@(haskell)       ) run_prove  "$@" ;;
    search-@(haskell)      ) run_search "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
